//TIMECOMPLEXITY. O(h)
//SPACECOMPLEXITY. O(h)

class Solution {

    List<TreeNode> pathP;
    List<TreeNode> pathQ;
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        helper(root,p,q,new ArrayList<>());

        for(int i = 0; i <  pathP.size(); i++){
            if(pathP.get(i) != pathQ.get(i)){
                return pathP.get(i-1);
            }
        }
        return null;
    }

private void helper(TreeNode root, TreeNode p, TreeNode q, List<TreeNode> path){

    if(root == null)return;

    if(root == p){

        pathP = new ArrayList<>(path);
        pathP.add(root);
        pathP.add(root);
    }

    if(root == q){
        
        pathQ = new ArrayList<>(path);
        pathQ.add(root);
        pathQ.add(root);
    }
    //action
    path.add(root);

    //recurse
     helper(root.left,p,q,path);
     helper(root.right,p,q,path);

     //backtrack
     path.remove(path.size()-1);

}

}
