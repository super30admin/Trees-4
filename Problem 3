//Time Complexity: O(n)
//Space Complexity: O(1)

//Recursively call the LCA function on the left and right subtrees 
//Now check if the left subtree is null? if yes, return right
//If no, check the right subtree. Then, for the right subtree, if null, return left
//If both the subtrees are null, the LCA is the root.


class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null || root==p || root==q) return root;
        TreeNode left = lowestCommonAncestor(root.left,p,q);
        TreeNode right = lowestCommonAncestor(root.right,p,q);
        return left==null?right:right==null?left:root;
    }
}
