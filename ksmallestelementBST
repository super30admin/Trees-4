// Time Complexity : O(k) 
// Space Complexity : O(h) for recursive stack
// Did this code successfully run on Leetcode : yes




// class Solution 
// {
//     int res;
//     int k;
//     public int kthSmallest(TreeNode root, int k) 
//     {
//         this.k = k;
//         res = -1;
//         recurr(root);
//         return res;
//     }
    
//     public void recurr(TreeNode root)
//     {
//         if(root==null)
//         {
//             return;
//         }
//         if(res !=-1)
//         {
//             return;
//         }
//         recurr(root.left);
//         k--;
//         if(k==0)
//         {
//             res = root.val;
//         }
//         recurr(root.right);
//     }
// }


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution 
{
   
    public int kthSmallest(TreeNode root, int k) 
    {
        if(root==null)
        {
            return 0;
        }
        int res = -1;
        
        Stack<TreeNode> st = new Stack<TreeNode>();
        
        while(!st.isEmpty() || root!=null)
        {
            while(root!=null)
            {
                st.add(root);
                root = root.left;
            }
            
            root = st.pop();
            k--;
            if(k==0)
            {
                res = root.val;
                break;
            }
            
            root=root.right;
        }
        
        
        return res;
    }
    
    
}