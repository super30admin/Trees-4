# Time Complexity : o(n)
# Space Complexity : o(n)
# Did this code successfully run on Leetcode : yes
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if(root==None):
            return None
        if(p.val < root.val) and (q.val < root.val):
            return self.lowestCommonAncestor(root.left,p,q)
        elif(p.val >root.val) and (q.val > root.val):
            return self.lowestCommonAncestor(root.right,p,q)
        else:
            return root
  
# Time Complexity - o(n)
# Space Complexity - o(1)
# Iterative Solution
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if(root==None):
            return None
        node=root
        while(node!=None):
            if(p.val>node.val) and (q.val>node.val):
                node=node.right
            elif(p.val<node.val) and (q.val< node.val):
                node=node.left
            else:
                return node
        
