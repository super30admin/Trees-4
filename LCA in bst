/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
// this approach won't work if either of p or q doesn't exist
// but if both p and q doesn't exist; it will return null
// the approach won't work if there are duplicates
// TC: O(N) : worst case in skewed tree
//  with implicit stack space O(N)
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        if(root.val <= p.val && root.val >= q.val || root.val >= p.val && root.val <= q.val)
            return root;
        else if(root.val < p.val && root.val < q.val){
            return lowestCommonAncestor(root.right, p, q);
        }
        else if(root.val > p.val && root. val > q.val){
            return lowestCommonAncestor(root.left, p, q);
        }
        return null;
    }
}
