//236. Lowest Common Ancestor of a Binary Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null|| root==p || root==q)return root;
        TreeNode left=lowestCommonAncestor(root.left,p,q);
        TreeNode right=lowestCommonAncestor(root.right,p,q);
        if(left==null && right==null)return null;
        else if(left!=null && right==null)return left;
        else if(right!=null && left==null)return right;
        else return root;

    }
}


 //TC=O(n) SC=O(h)
// class Solution {
//     List<TreeNode>pathP;
//     List<TreeNode>pathQ;
//     public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
//         if(root==null)return null;
//         this.pathP=new ArrayList<>();
//         this.pathQ=new ArrayList<>();

//         backrack(root,p,q,new ArrayList<>());
//         for(int i=0;i<pathP.size();i++){
//             if(pathP.get(i)!=pathQ.get(i)){
//                 return pathP.get(i-1);
//             }
//         }
//         return null;
//     }
//     private void backrack(TreeNode root, TreeNode p, TreeNode q,List<TreeNode>path){
//         //base
//         if(root==null)return;
//         //logic
//         path.add(root);
//         //action
//         if(root==p){
//             pathP=new ArrayList<>(path);
//             pathP.add(p);
//         }
//         if(root==q){
//             pathQ=new ArrayList<>(path);
//             pathQ.add(q);
//         }
//         //recurse
//         backrack(root.left,p,q,path);
//         backrack(root.right,p,q,path);
//         //backtrack
//         path.remove(path.size()-1);
//     }
// }