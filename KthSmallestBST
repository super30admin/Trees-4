/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
/*
Approach: Inorder traversal of the tree and increase the count, then return the kth smallest element.
Time: O(N)
Space: O(maxDepth)
*/
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        Stack<TreeNode> stack = new Stack<>();
        int count = 0;
        
        if(root == null){
            return -1;
        }
        
        while(!stack.isEmpty() || root != null){
            while(root != null){
                stack.push(root);
                root = root.left;
            }
            
            TreeNode popped = stack.pop();
            count += 1;

            if(count == k){
                return popped.val;
            }
            
            root = popped.right;
        }
        
        return -1;
    }
}
