#leetcode - 235
#time - O(n)
#space - O(1)

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':

        if p.val < root.val and q.val < root.val:  # if both are smaller go left
            return self.lowestCommonAncestor(root.left, p, q)

        elif p.val > root.val and q.val > root.val:  # if both are bigger go right
            return self.lowestCommonAncestor(root.right, p, q)
        else:  # root lies in the range
            return root



class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        return self.helper_func(root, p, q)

    def helper_func(self, curr, p, q):
        if not (curr):
            return
        # print(curr.val,p.val,q.val)
        if curr.val <= p.val and curr.val >= q.val:  # if the value lies in between
            return curr
        elif curr.val >= p.val and curr.val <= q.val:  # if the value lies in between
            # print('_________')
            return curr
        left = self.helper_func(curr.left, p, q)
        right = self.helper_func(curr.right, p, q)
        # print(left,right)
        if left:
            return left
        elif right:
            return right
        else:
            return

