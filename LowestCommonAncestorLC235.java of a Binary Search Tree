
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {

    //Iterative Solution
    
    //Time Complexity: O(n)
    //Space Complexity : O(1)

//      public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    
//        while(root!= null){
           
//            if(p.val < root.val && q.val < root.val){
//                root = root.left;
//            }
//            else if(p.val > root.val && q.val > root.val){
//                root = root.right;
//            }
//            else{
//                return root;
//            }
//        }
//         return null;       
//     }
    
    
     //Recursive Solution
    
    //Time Complexity: O(n)
    //Space Complexity : O(n), recursive stack space
    
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    
        if(root == null){
            return null;
        }
        
        if(p.val < root.val && q.val < root.val){
            
            return lowestCommonAncestor(root.left, p, q);
        }
        else if(p.val > root.val && q.val > root.val){
            
            return lowestCommonAncestor(root.right, p, q);
        }
        return root;
        
    }
    
    
    
    
    //     public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
//           if(root == null){
//             return null;
//         }
        
//         if(root == p || root == q){
//             return root;
//         }
        
//         TreeNode left = lowestCommonAncestor(root.left, p, q);
//         TreeNode right = lowestCommonAncestor(root.right, p, q);
        
//         if(left!= null && right != null){
//             return root;
//         }
        
//         return left!= null ? left : right;
        
//     }
}
